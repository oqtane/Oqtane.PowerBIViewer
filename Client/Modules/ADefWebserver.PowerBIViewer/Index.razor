@using Microsoft.PowerBI.Api;
@using Oqtane.PowerBIViewer.Services
@using Oqtane.PowerBIViewer.Models
@using Oqtane.PowerBIViewer.Shared.Models;

@namespace Oqtane.PowerBIViewer
@inherits ModuleBase
@inject IPowerBIViewerService PowerBIViewerService
@inject NavigationManager NavigationManager
@inject IStringLocalizer<Index> Localizer
<style>
    #reportContainer {
        height: 600px;
        width: 100%;
        max-width: 2000px;
    }
</style>
@if (_PowerBIViewers == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <ActionLink Action="Add" Security="SecurityAccessLevel.Edit" Text="Add PowerBIViewer" ResourceKey="Add" />
    <br />
    <br />
    <div @ref="@PowerBIElement" style="width:100%;height:740px;max-width: 2000px" />
}

@code {
    private ElementReference PowerBIElement;
    public override List<Resource> Resources => new List<Resource>()
    {
        new Resource { ResourceType = ResourceType.Stylesheet, Url = ModulePath() + "Module.css" },
        new Resource { ResourceType = ResourceType.Script, Url = ModulePath() + "Module.js" },
        new Resource { ResourceType = ResourceType.Script, Url = ModulePath() + "powerbi.js" }
    };

    List<PowerBIViewer> _PowerBIViewers;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _PowerBIViewers = await PowerBIViewerService.GetPowerBIViewersAsync(ModuleState.ModuleId);
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Loading PowerBIViewer {Error}", ex.Message);
            AddModuleMessage(Localizer["Message.LoadError"], MessageType.Error);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await LoadReport();
    }

    protected async Task LoadReport()
    {
        //try
        //{
        //    var result = new PowerBIEmbedConfig();
        //    var accessToken = await @PowerBIService.GetPowerBIAccessTokenAsync();
        //    var tokenCredentials = new TokenCredentials(accessToken, "Bearer");

        //    using (var client = new PowerBIClient(new Uri(_powerBISettings.ApiUrl), tokenCredentials))
        //    {
        //        var report = await client.Reports.GetReportInGroupAsync(new Guid(PowerBIWorkspaceID), new Guid(PowerBIReportID));
        //        var generateTokenRequestParameters = new GenerateTokenRequest(accessLevel: "view");
        //        var tokenResponse = await client.Reports.GenerateTokenAsync(new Guid(PowerBIWorkspaceID), new Guid(PowerBIReportID), generateTokenRequestParameters);

        //        result.EmbedToken = tokenResponse;

        //        result.EmbedUrl = report.EmbedUrl;
        //        result.Id = report.Id.ToString();

        //        // Now Load the Power BI Report
        //        await Interop.CreateReport(
        //            PowerBIElement,
        //            false,
        //            tokenResponse.Token,
        //            report.EmbedUrl,
        //            report.Id.ToString());
        //    }
        //}
        //catch (Exception ex)
        //{
        //    ErrorMessage = ex.GetBaseException().Message;
        //    StateHasChanged();
        //}
    }
}
