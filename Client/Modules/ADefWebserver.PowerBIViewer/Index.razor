@using Microsoft.PowerBI.Api;
@using Oqtane.PowerBIViewer.Services
@using Oqtane.PowerBIViewer.Models
@using Oqtane.PowerBIViewer.Shared.Models;

@namespace Oqtane.PowerBIViewer
@inherits ModuleBase
@inject IPowerBIViewerService PowerBIViewerService
@inject NavigationManager NavigationManager
@inject IStringLocalizer<Index> Localizer
<style>
    #reportContainer {
        height: 600px;
        width: 100%;
        max-width: 2000px;
    }
</style>
@if (_PowerBIViewer == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div @ref="@PowerBIElement" style="width:100%;height:740px;max-width: 2000px" />
}

@code {
    private ElementReference PowerBIElement;
    public override List<Resource> Resources => new List<Resource>()
    {
        new Resource { ResourceType = ResourceType.Stylesheet, Url = ModulePath() + "Module.css" },
        new Resource { ResourceType = ResourceType.Script, Url = ModulePath() + "Module.js" },
        new Resource { ResourceType = ResourceType.Script, Url = ModulePath() + "powerbi.js" }
    };

    PowerBIViewer _PowerBIViewer;
    private string AuthToken;
    private string EmbedUrl;
    private string EmbedToken;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _PowerBIViewer = await PowerBIViewerService.GetPowerBIViewerAsync(ModuleState.ModuleId);

            if (_PowerBIViewer.AuthToken != "")
            {
                AuthToken = @_PowerBIViewer.AuthToken;
                EmbedUrl = @_PowerBIViewer.EmbedUrl;
                EmbedToken = @_PowerBIViewer.EmbedToken.Token.ToString();
            }
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Loading PowerBIViewer {Error}", ex.Message);
            AddModuleMessage(Localizer["Message.LoadError"], MessageType.Error);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await LoadReport();
    }

    protected async Task LoadReport()
    {
        try
        {

        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Loading PowerBIViewer {Error}", ex.Message);
            AddModuleMessage(Localizer["Message.LoadError"], MessageType.Error);
        }
    }
}
